// routes/send-email.js
const express = require('express');
const nodemailer = require('nodemailer');
const updatePurchaseCounts = require('./utils/updatePurchaseCount');

const router = express.Router();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SMTP-—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä–∞
const transporter = nodemailer.createTransport({
  host: process.env.SMTP_HOST,
  port: +process.env.SMTP_PORT || 465,
  secure: process.env.SMTP_SECURE === 'true',
  auth: {
    user: process.env.SMTP_USER,
    pass: process.env.SMTP_PASS,
  },
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
transporter.verify(error => {
  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ SMTP:', error);
  } else {
    console.log('‚úÖ SMTP –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π');
  }
});

// POST /api/send-email
router.post('/send-email', async (req, res) => {
  const { name, phone, email, comment, cardIds } = req.body;

  if (!name || !phone || !email || !Array.isArray(cardIds)) {
    return res.status(400).json({
      error: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: name, phone, email, cardIds[]',
    });
  }

  const mailOptions = {
    from: `"–ó–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞" <${process.env.SMTP_USER}>`,
    to: `${email}, ${process.env.NOTIFY_EMAIL}`,
    subject: `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç ${name}`,
    text: `
      –ò–º—è: ${name}
      –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
      Email –∫–ª–∏–µ–Ω—Ç–∞: ${email}
      –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment || '-'}
      –¢–æ–≤–∞—Ä—ã: ${cardIds.join(', ')}`,
    html: `
      <h2>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞</h2>
      <p><strong>–ò–º—è:</strong> ${name}</p>
      <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${phone}</p>
      <p><strong>Email –∫–ª–∏–µ–Ω—Ç–∞:</strong> ${email}</p>
      <p><strong>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</strong> ${comment || '-'}</p>
      <p><strong>–¢–æ–≤–∞—Ä—ã:</strong> ${cardIds.join(', ')}</p>
    `,
  };

  try {
    const info = await transporter.sendMail(mailOptions);
    console.log('üì© –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', info.messageId);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–æ–≤ –ø–æ–∫—É–ø–æ–∫
    await updatePurchaseCounts(cardIds);

    res.status(200).json({ success: true });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:', error);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∫—É–ø–∫–∏' });
  }
});

module.exports = router;
